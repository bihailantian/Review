gradle.allprojects {
    //获取当前git提交记录的hash值
    ext.getGitHeadRefsSuffix = {
        try {
            // .git/HEAD描述当前目录所指向的分支信息，内容示例："ref: refs/heads/master\n"
            def headFile = new File('.git/HEAD')
            if (headFile.exists()) {
                String[] strings = headFile.getText('UTF-8').split(" ")
                if (strings.size() > 1) {
                    String refFilePath = '.git/' + strings[1]

                    // 根据HEAD读取当前指向的hash值，路径示例为：".git/refs/heads/master"
                    def refFile = new File(refFilePath.replace("\n", ""))

                    // 索引文件内容为hash值+"\n"，
                    // 示例："90312cd9157587d11779ed7be776e3220050b308\n"
                    return "_" + refFile.getText('UTF-8').substring(0, 8)
                }

            }
        } catch (Exception e) {
            e.printStackTrace()
        }
        return ""
    }
    //获取当前git提交记录的hash值
    ext.getGitHash = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    ext.generateVersionCode = {
        def strTime = new Date().format("yyyyMMddHH", TimeZone.getTimeZone("GMT+8"))
        return Integer.parseInt(strTime)
    }

    //获取commit提交次数
    ext.getGitRevision =  {
        //return 'git rev-parse --short HEAD'.execute().text.trim()
        //def cmd = 'git rev-list HEAD --first-parent --count'
        def cmd = 'git rev-list HEAD --count'
        cmd.execute().text.trim().toInteger()
    }

    /**
     * 修改 Android 12 因为 exported 的构建问题
     */
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            output.processResources.doFirst { pm ->
                String manifestPath = output.processResources.manifestFile
                def manifestFile = new File(manifestPath)
                def xml = new XmlParser(false, true).parse(manifestFile)
                def exportedTag = "android:exported"
                ///指定 space
                def androidSpace = new groovy.xml.Namespace('http://schemas.android.com/apk/res/android', 'android')
                def nodes = xml.application[0].'*'.findAll {
                    //挑选要修改的节点，没有指定的 exported 的才需要增加
                    (it.name() == 'activity' || it.name() == 'receiver' || it.name() == 'service') && it.attribute(androidSpace.exported) == null

                }
                ///添加 exported，默认 false
                nodes.each {
                    def isMain = false
                    it.each {
                        if(it.name() == "intent-filter") {
                            it.each {
                                if(it.name() == "action") {
                                    if(it.attributes().get(androidSpace.name) == "android.intent.action.MAIN") {
                                        isMain = true
                                        println("......................MAIN FOUND......................")
                                    }
                                }
                            }
                        }
                    }
                    it.attributes().put(exportedTag, "${isMain}")
                }

                PrintWriter pw = new PrintWriter(manifestFile)
                pw.write(groovy.xml.XmlUtil.serialize(xml))
                pw.close()
            }
        }
    }
}